go.property("move_to", vmath.vector3())
go.property("move_speed", 2)
go.property("key", hash(""))
go.property("url", msg.url())
go.property("color", vmath.vector4(1, 1, 1, 1))
go.property("rotation", vmath.quat())

local lookup = require "main.lookup"

local width = tonumber(sys.get_config("display.width"))
local height = 625

local WALKING = 0
local CHASING = 1
local PLAYER_URL = "player"

function init(self)
    self.correction = vmath.vector3()
    msg.post(self.url, "thing_created")
    do_mode_walking(self)
end

-- manhatten distance
function dist(curr_pos, tgt_pos)
    return math.abs((curr_pos.x - tgt_pos.x) + (curr_pos.y - tgt_pos.y))
end

function update(self, dt)
    self.correction = vmath.vector3()
    local min_dist = self.move_speed / 2
    local speed = vmath.vector3(0, 0, 0)
    local pos = go.get_position()
    local tgt = self.target
    local dist = dist(pos, tgt)
    local dy = pos.y - tgt.y
    local dx = pos.x - tgt.x

    if dx == 0 then
        speed.x = 0
    elseif dx < 0 then
        speed.x = math.min(-dx, self.move_speed)
    else
        speed.x = -math.min(dx, self.move_speed)
    end

    if dy == 0 then
        speed.y = 0
    elseif dy < 0 then
        speed.y = math.min(-dy, self.move_speed)
    else
        speed.y = -math.min(dy, self.move_speed)
    end

	local anim = hash("idle")
	if speed.x > 0 then
		anim = hash("right")
	elseif speed.x < 0 then
		anim = hash("left")
	elseif speed.y > 0 then
		anim = hash("up")
	elseif speed.y < 0 then
		anim = hash("down")
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end


    if dist < min_dist then -- we finished the end of our walk
        if self.mode == WALKING then
            do_mode_walking(self)
        elseif self.mode == CHASING then
            do_mode_chasing(self)
        end
    end

    go.set_position(pos + speed * dt)
end

function on_message(self, message_id, message, sender)
    -- print( go.get_id(), message_id )
    if message_id == hash("collision_response") then
		if message.group == hash("player") then
			print("HEY!")
			msg.post("#hey", "play_sound")
		end

        if message.group == "stealth_circle" then
            -- We see the player, chaaaarge
            print("I found a circle", sender)
            if message.enter == true then
                do_mode_chasing(self)
            elseif message.enter == false then
                do_mode_walking(self)
            end
        end
    elseif message_id == hash("contact_point_response") then
        do_mode_walking(self)
        -- Get the info needed to move out of collision. We might
        -- get several contact points back and have to calculate
        -- how to move out of all of them by accumulating a
        -- correction vector for this frame:
        if message.distance > 0 then
            -- First, project the accumulated correction onto
            -- the penetration vector
            local proj = vmath.project(self.correction, message.normal * message.distance)
            if proj < 1 then
                -- Only care for projections that does not overshoot.
                local comp = (message.distance - message.distance * proj) * message.normal
                -- Apply compensation
                go.set_position(go.get_position() + comp)
                -- Accumulate correction done
                self.correction = self.correction + comp
            end
        end
    end
end

function do_mode_walking(self)
    self.mode = WALKING
	local pos = go.get_position()
	local size = 250
	local minx = math.max(pos.x - size, 0)
	local maxx = math.min(pos.x + size, width)
	local miny = math.max(pos.y - size, 90)
	local maxy = math.min(pos.y + size, height)
    self.target = vmath.vector3(math.random(minx, maxx), math.random(miny, maxy), 0)
    -- print("I'm moving! to " .. self.target)
end

function do_mode_chasing(self)
    self.mode = CHASING
    self.target = vmath.vector3( go.get_position("player") )
end
