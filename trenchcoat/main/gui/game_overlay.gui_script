local circle_node
-- how fast the score counts up per second
local score_inc_speed = 1000

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed
	circle_node = gui.get_node("hole-overlay")
	set_exclaimation_text("")
	self.doing_gameover = false
	self.doing_score = false
	self.original_size = gui.get_size(circle_node)

	-- the target score is the current score in the game
	self.target_score = 0
	-- the current score being counted up towards the target score
	self.current_score = 0
	-- the score as displayed in the hud
	self.displayed_score = 0
	-- keep a reference to the node displaying the score for later use below
	self.score_node = gui.get_node("score")
end

function update(self, dt)
	-- check if the score needs to be updated
	if self.current_score < self.target_score then
		-- increment the score for this timestep to grow towards the target score
		self.current_score = self.current_score + score_inc_speed * dt
		-- clamp the score so it doesn't grow past the target score
		self.current_score = math.min(self.current_score, self.target_score)
		-- floor the score so it can be displayed without decimals
		local floored_score = math.floor(self.current_score)
		-- check if the displayed score should be updated
		if self.displayed_score ~= floored_score then
			-- update displayed score
			self.displayed_score = floored_score
			-- update the text of the score node
			gui.set_text(self.score_node, string.format("%d p", self.displayed_score))
			-- set the scale of the score node to be slightly bigger than normal
			local s = 1.3
			gui.set_scale(self.score_node, vmath.vector3(s, s, s))
			-- then animate the scale back to the original value
			s = 1.0
			gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector3(s, s, s), gui.EASING_OUT, 0.2)
		end
	end
end

-- this function stores the added score so that the displayed score can be counted up in the update function
local function swoosh_done(self, node)
	-- retrieve score from node
	local amount = tonumber(gui.get_text(node))
	-- increase the target score, see the update function for how the score is updated to match the target score
	self.target_score = self.target_score + amount
	-- remove the temp score
	gui.delete_node(node)
end

-- this function animates the node from having floated first to swoosh away towards the displayed total score
local function float_done(self, node)
	local duration = 0.2
	-- swoosh away towards the displayed score
	gui.animate(node, gui.PROP_POSITION, gui.get_position(self.score_node), gui.EASING_IN, duration, 0.0, swoosh_done)
	-- also fade out partially during the swoosh
	gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 0.6), gui.EASING_IN, duration)
end


function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
	--print( sender, message_id )
	if message_id == hash("game_over") then
		do_gameover(self)
	elseif message_id == hash("update_player_position") then
		gui.set_position(circle_node, message.position)
	end

	-- register added score, this message could be sent by anyone wanting to increment the score
	if message_id == hash("add_score") then
		-- create a new temporary score node
		local node = gui.new_text_node(message.position, tostring(message.amount))
		-- use the small font for it
		gui.set_font(node, "Bungee")
		-- initially transparent
		gui.set_color(node, vmath.vector4(1, 1, 1, 0))
		gui.set_outline(node, vmath.vector4(0, 0, 0, 0))
		-- fade in
		gui.animate(node, gui.PROP_COLOR, vmath.vector4(1, 1, 1, 1), gui.EASING_OUT, 0.3)
		gui.animate(node, gui.PROP_OUTLINE, vmath.vector4(0, 0, 0, 1), gui.EASING_OUT, 0.3)
		-- float
		local offset = vmath.vector3(0, 20, 0)
		gui.animate(node, gui.PROP_POSITION, gui.get_position(node) + offset, gui.EASING_NONE, 0.5, 0.0, float_done)
	end
end

function do_gameover(self)
	if not self.doing_gameover then
		self.doing_gameover = true
		local end_size = vmath.vector3(100, 100, 0)
		set_exclaimation_text("BUSTED!")
		circle_node = gui.get_node("hole-overlay")
		gui.animate(
			circle_node,
			"size",
			end_size,
			gui.EASING_INOUTEXPO,
			0.5,
			0.1,
			done_gameover
		)
		-- gui.animate('', '', '', '', 3, 3, done_gameover(self))
	end
end

function reset(self, node)
	msg.post("@system:", "reboot")
end

function done_gameover(self)
	print("done gameover")
	local end_size = vmath.vector3(100, 100, 0)
	gui.animate(gui.get_node("hole-overlay"), 'size', end_size, gui.EASING_INOUTEXPO, 1.0, 1.0, reset)
	self.doing_gameover = false
	-- unload the level
	-- msg.post("/loader#proxy", "disable")
	-- msg.post("/loader#proxy", "final")
	-- msg.post("/loader#proxy", "unload")
end


function set_exclaimation_text(text)
	local exclaim_node = gui.get_node("text")
	print( "setting text", exclaim_node )
	gui.set_text(exclaim_node, text)
end
